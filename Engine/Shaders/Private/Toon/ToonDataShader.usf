#include "../Common.ush"
#include "../SceneTextureParameters.ush"
#include "/Engine/Generated/Material.ush"
#include "/Engine/Generated/VertexFactory.ush"


struct FSimpleMeshPassVSToPS
{
	FVertexFactoryInterpolantsVSToPS FactoryInterpolants;
	float4 SvPosition : SV_POSITION;
};

//Texture2D NormalTexture;
//SamplerState PointClampSampler;
//Texture2D SceneTexture;

void MainVS(
	FVertexFactoryInput Input,
	out FSimpleMeshPassVSToPS Output)
{

	float4 ClipSpacePosition;
	
	ResolvedView = ResolveView();

	FVertexFactoryIntermediates VFIntermediates = GetVertexFactoryIntermediates(Input);

	float4 WorldPos = VertexFactoryGetWorldPosition(Input, VFIntermediates);
	float3 WorldNormal = VertexFactoryGetWorldNormal(Input, VFIntermediates);

	float3x3 TangentToLocal = VertexFactoryGetTangentToLocal(Input, VFIntermediates);

	FMaterialVertexParameters VertexParameters = GetMaterialVertexParameters(Input, VFIntermediates, WorldPos.xyz, TangentToLocal);
	WorldPos.xyz += GetMaterialWorldPositionOffset(VertexParameters);
	//WorldPos.xyz +=WorldNormal*0.1;
	
	float4 RasterizedWorldPosition = VertexFactoryGetRasterizedWorldPosition(Input, VFIntermediates, WorldPos);
	ClipSpacePosition = mul(RasterizedWorldPosition, ResolvedView.TranslatedWorldToClip);
	Output.SvPosition = INVARIANT(ClipSpacePosition);
	Output.FactoryInterpolants = VertexFactoryGetInterpolantsVSToPS(Input, VFIntermediates, VertexParameters);
}

// Toon Buffer step 9
// 设置RenderTarget
void MainPS(
	FSimpleMeshPassVSToPS In,
	out float4 OutToonOutlineData : SV_Target0,
	out float4 OutToonShadowData : SV_Target1,
	out float4 OutToonCustomData : SV_Target2)
{
	// 获取像素的材质参数(此处的材质就是材质辑器编辑出来的材质).
	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(In.FactoryInterpolants, In.SvPosition);
	
	float4 VertexColor = MaterialParameters.VertexColor;
	float VertexColorAlpha = VertexColor.a;
	float4 CustomData = float4(0.3, 0.7, 0.5,1.0);
	
	float3 OutlineColor = float3(0.0, 0.0, 0.0);
	float OutlineThickness = VertexColorAlpha;
	float4 OutlineData = float4(OutlineColor,OutlineThickness);
	
	float3 ShadowColor = float3(0.0, 0.0, 0.0);
	float ShadowOffset = 0.0;
	float4 ShadowData = float4(ShadowColor,ShadowOffset);

	//GetValue
	ResolvedView = ResolveView();
	float2 ScreenUV = SvPositionToViewportUV(In.SvPosition);
	
	//float3 N = NormalTexture.Sample(PointClampSampler, ScreenUV, 0).rgb;
	float3 N = MaterialParameters.WorldNormal;
	float3 L = ResolvedView.AtmosphereLightDirection[0].xyz;
	//Calculate
	
	
	// FPixelMaterialInputs用于获取材质编辑器的针脚
	// FPixelMaterialInputs PixelMaterialInputs;
#ifdef  HAVE_GetToonMaterialOutput0
	OutlineData = LWCToFloat(GetToonMaterialOutput0(MaterialParameters));
#endif
#ifdef  HAVE_GetToonMaterialOutput1
	ShadowData = LWCToFloat(GetToonMaterialOutput1(MaterialParameters));
#endif
#ifdef  HAVE_GetToonMaterialOutput2
	CustomData = LWCToFloat(GetToonMaterialOutput2(MaterialParameters));
#endif

	//Face
	float3 FaceForwardVector = float3(0.f,1.f,0.f);
	float3 FaceRightVector = float3(1.f,0.f,0.f);
#ifdef  HAVE_GetToonFaceMaterialOutput0
	OutlineData = LWCToFloat(GetToonFaceMaterialOutput0(MaterialParameters));
#endif
#ifdef  HAVE_GetToonFaceMaterialOutput1
	ShadowData = LWCToFloat(GetToonFaceMaterialOutput1(MaterialParameters));
#endif
#ifdef  HAVE_GetToonFaceMaterialOutput2
	FaceForwardVector = LWCToFloat(GetToonFaceMaterialOutput2(MaterialParameters));
#endif
#ifdef  HAVE_GetToonFaceMaterialOutput3
	FaceRightVector = LWCToFloat(GetToonFaceMaterialOutput3(MaterialParameters));
#endif
#ifdef  HAVE_GetToonFaceMaterialOutput4
	CustomData = LWCToFloat(GetToonFaceMaterialOutput4(MaterialParameters));
#endif

	CustomData.xyz = N;
	OutToonOutlineData = OutlineData;
	OutToonShadowData = ShadowData;
	OutToonCustomData = CustomData;
}
